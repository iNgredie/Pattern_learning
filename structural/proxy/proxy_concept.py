from abc import ABC, abstractmethod


class Subject(ABC):
    """
    Интерфейс Субьекта объявляет общие операции как для Реального Субьекта, так
    и для Заместителя. Пока клиент работает с Реальным Субъектом, используя этот
    интерфейс, вы сможеете передать ему засместителя вместо реального субьетка.
    """

    @abstractmethod
    def request(self) -> None:
        pass


class RealSubject(Subject):
    """
    Реальный Субъект содержит некоторую базовую бизнес-логику. Как правило,
    Реальные Субъекты способны выполнять некоторую полезную работу, которая к
    тому же может быть очень медленной или точной - например, коррекция входных
    данных. Заместитель может решить эти задачи без каких-либо изменений в коде
    Реального Субъекта
    """

    def request(self) -> None:
        print('RealSubject: Обработка запроса.')


class Proxy(Subject):
    """
    Интерфейс Заместителя идентичен интерфейсу Реального Субъекта.
    """

    def __init__(self, r_sub: RealSubject) -> None:
        self._real_subject = r_sub

    def request(self) -> None:
        """
        Наиболее распространенным областями применения паттерна Заместитель
        являются ленивая загрузка, кэширование, котроль доступа, ведение
        журнала и т.д. Заместитель может выполнить одну из этих задач, а затем,
        в зависимости от результата, передать выполнение одноименному методы в
        связанном объекте класса Реального Субъекта.
        """

        if self.check_access():
            self._real_subject.request()
            self.log_access()

    def check_access(self) -> bool:
        print('Proxy: проверка прав доступа перед обработкой запроса.')
        return True

    def log_access(self) -> None:
        print('Proxy: логгирование информации запроса.', end='')


def client_code(subject: Subject) -> None:
    """
    Клиентский код должен работать со всеми объектами (как с реальными, так и
    заместителями) через интрефейс Субъекта, чтобы поддерживать как реальные
    субъекты, так и заместителей. В реальной жизни, однако, клиенты в основном
    работают с реальными субъетами напрямую В этом случае, для более простой
    реализации паттерна, можно расширить заместителя из класса реального
    субъекта.
    """
    subject.request()


if __name__ == '__main__':
    print('Client: Executing the client code with a real subject:')
    real_subject = RealSubject()
    client_code(real_subject)

    print('')

    print('Client: Executing the same client code with a proxy:')
    proxy = Proxy(real_subject)
    client_code(proxy)
