class System1:
    """
    Подсистема может принимать запросы либо от фасада, либо от клиента напрямую.
    В любом случае, для Подсистемы Фасад - это еще один клиент и он не является
    частью Подсистемы
    """

    def operation1(self) -> str:
        return 'Subsystem1: Ready!'

    def operation_n(self) -> str:
        return 'Subsystem1: Go!'


class System2:
    """
    Некоторые фасады могу работать с разными подсистемами одновременно
    """

    def operation1(self) -> str:
        return 'Subsystem2: Get ready!'

    def operation_z(self) -> str:
        return 'Subsystem2: Fire!'


class Facade:
    """
    Класс Фасада предоставляет простой интерфейс для сложной логики одно или
    нескольких подсистем. Фасад делегирует запросы клиентов соотвествующим
    объектам внутри подсистемы. Фасад также отвечает за управление их жизненым
    циклом. Все это защищает клиента от нежелательной сложности подсистемы.
    """

    def __init__(self, sys_1: System1, sys_2: System2) -> None:
        """
        В зависимости от потребностей вашего приложения вы можете предоставить
        Фасаду существующие объекты подсистемы или заставить Фасад создать их
        самостоятельно.
        """

        self._sys_1 = sys_1
        self._sys_2 = sys_2

    def operation(self) -> str:
        """
        Методы Фасада удобны для быстрого доступа к сложной функциональности
        подсистем. Однако клиенты получают только часть возможностей подсистемы.
        """

        result = [
            'Facade initializes subsystems:',
            self._sys_1.operation1(),
            self._sys_2.operation1(),
            'Facade orders subsystems to perform the action:',
            self._sys_1.operation_n(),
            self._sys_2.operation_z()
        ]
        return '\n'.join(result)


def client_code(facade: Facade) -> None:
    """
    Клиентский код работает со сложными подсистемами через простой интерфейс,
    предоставляемы Фасадом. Когда фасад управляет жизненным циклом подсистемы,
    клиент может даже не знать о существовании подсистемы. Такой подход
    позволяет держать сложность под контролем.
    """
    print(facade.operation(), end='')


if __name__ == '__main__':
    # В клиентском коде могут быть уже созданы некоторые объекты подсистемы.
    # В этом случае может оказаться целесобразным инициализировать Фасад с
    # этими объектами вместо того, чтобы позволить Фасаду создавать новые экзапляры.
    subsystem1 = System1()
    subsystem2 = System2()
    f = Facade(subsystem1, subsystem2)
    client_code(f)
