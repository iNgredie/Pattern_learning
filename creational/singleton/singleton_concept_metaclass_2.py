"""
Это потокобезопасная реализцая класса Singleton
"""


class SingletonMeta(type):
    _instances = {}

    _lock: Lock = Lock()
    """
    У нас теперь есть объект-блокировка для синхронизации потоков во время
    превого доступа к Одиночке.
    """

    def __call__(cls, *args, **kwargs):
        # Теперь представьте, что программа была только-только запущена.
        # Объекта-одиночки еще никто не создавал, поэтому несколько потоков
        # воплне могли одновременно пройти через предыдущее уловие и достигнуть
        # блокировки. Самый быстрый поток поставит блокировку и двинется внутрь
        # секции, пока другие будут здесь его ожидать.
        with cls._lock:
            # Первый поток достигает этого уловния и проходит внутрь, создавая
            # объект-одиночку. Как только этот поток покинет секцию и освободит
            # блокировку, следующий поток может снова устанвоить болокировку и
            # зайти внутрь. Однако теперь экземпляр одиночки уже будет создан и
            # поток не сможет пройти через это условие, а значит новый объект не
            # будет создан
            if cls not in cls._instances:
                cls._instances[cls] = super().__call__(*args, **kwargs)
            return cls._instances[cls]


class Singleton(metaclass=SingletonMeta):
    value: str = None
    """
    Мы используем это поле, чтобы доказать, что наша Одиночка действительно
    работает.
    """